var sound = document.getElementById("buzzersound"); function finish() { sound.play() } workGlobalVar = $.cookie("focusValue"), null == workGlobalVar && (workGlobalVar = 25, $.cookie("focusValue", 25)), shortGlobalVar = $.cookie("shortValue"), null == shortGlobalVar && (shortGlobalVar = 5, $.cookie("shortValue", 5)), longGlobalVar = $.cookie("longValue"), null == longGlobalVar && (longGlobalVar = 15, $.cookie("longValue", 15)), currentAlertDesc = "Your time is up!", function (t) { function e(e) { return t.extend({ time_in_seconds: 3600, time_format: "MM:ss", tick: function (t, e, n) { document.title = "(" + n + ")" }, buzzer: function (t) { document.title = currentAlertDesc, finish() }, autostart: !1 }, e) } t.fn.extend({ createTimer: function (t) { var n = e(t); timer_local = !1; return this.text(i(new Date(1e3 * n.time_in_seconds), n.time_format)).data("countdown.duration", 1e3 * n.time_in_seconds).data("countdown.state", "ready").data("countdown.timer_id", (new Date).getTime()), n.autostart && this.startTimer(n), this }, startTimer: function (n) { var a = e(n); return this.each(function () { var e = t(this).data("countdown.state", "running"), n = e.data("countdown.timer_id"), o = (new Date).getTime() + e.data("countdown.duration"), r = setInterval(function () { if (n == e.data("countdown.timer_id") && "running" == e.data("countdown.state")) { var t = Math.round((o - (new Date).getTime()) / 1e3); t <= 0 && (clearInterval(r), t = 0), e.data("countdown.duration", 1e3 * t); var s = i(new Date(1e3 * t), a.time_format); e.text(s), a.tick(e, t, s), 0 == t && a.buzzer(e) } else clearInterval(r) }, 1e3) }) }, resetTimer: function (t) { var n = e(t); document.title = "Productivity Timer | Schalk Burger"; return this.text(i(new Date(1e3 * n.time_in_seconds), n.time_format)).data("countdown.duration", 1e3 * n.time_in_seconds).data("countdown.state", "ready").data("countdown.timer_id", (new Date).getTime()), this }, pauseTimer: function () { return this.data("countdown.state", "paused") } }); var n, a, o, r, i = (n = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, a = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, o = /[^-+\dA-Z]/g, r = function (t, e) { for (t = String(t), e = e || 2; t.length < e;)t = "0" + t; return t }, function (t, e, s) { var u = i; if (1 != arguments.length || "[object String]" != Object.prototype.toString.call(t) || /\d/.test(t) || (e = t, t = void 0), t = t ? new Date(t) : new Date, isNaN(t)) throw SyntaxError("invalid date"); "UTC:" == (e = String(u.masks[e] || e || u.masks.default)).slice(0, 4) && (e = e.slice(4), s = !0); var d = s ? "getUTC" : "get", l = t[d + "Date"](), m = t[d + "Day"](), c = t[d + "Month"](), y = t[d + "FullYear"](), h = t[d + "Hours"](), T = t[d + "Minutes"](), f = t[d + "Seconds"](), g = t[d + "Milliseconds"](), M = s ? 0 : t.getTimezoneOffset(), b = { d: l, dd: r(l), ddd: u.i18n.dayNames[m], dddd: u.i18n.dayNames[m + 7], m: c + 1, mm: r(c + 1), mmm: u.i18n.monthNames[c], mmmm: u.i18n.monthNames[c + 12], yy: String(y).slice(2), yyyy: y, h: h % 12 || 12, hh: r(h % 12 || 12), H: h, HH: r(h), M: T, MM: r(T), s: f, ss: r(f), l: r(g, 3), L: r(g > 99 ? Math.round(g / 10) : g), t: h < 12 ? "a" : "p", tt: h < 12 ? "am" : "pm", T: h < 12 ? "A" : "P", TT: h < 12 ? "AM" : "PM", Z: s ? "UTC" : (String(t).match(a) || [""]).pop().replace(o, ""), o: (M > 0 ? "-" : "+") + r(100 * Math.floor(Math.abs(M) / 60) + Math.abs(M) % 60, 4), S: ["th", "st", "nd", "rd"][l % 10 > 3 ? 0 : (l % 100 - l % 10 != 10) * l % 10] }; return e.replace(n, function (t) { return t in b ? b[t] : t.slice(1, t.length - 1) }) }); i.masks = { default: "ddd mmm dd yyyy HH:MM:ss", shortDate: "m/d/yy", mediumDate: "mmm d, yyyy", longDate: "mmmm d, yyyy", fullDate: "dddd, mmmm d, yyyy", shortTime: "h:MM TT", mediumTime: "h:MM:ss TT", longTime: "h:MM:ss TT Z", isoDate: "yyyy-mm-dd", isoTime: "HH:MM:ss", isoDateTime: "yyyy-mm-dd'T'HH:MM:ss", isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'" }, i.i18n = { dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] } }(jQuery), $(function () { var t = 60 * workGlobalVar; $("#timerPosition").createTimer({ time_in_seconds: 60 * workGlobalVar }), $("#focusButton").click(function () { workValue = 60 * workGlobalVar, t = workValue, currentAlertDesc = "Your focus time is up. Take a break.", $("#timerPosition").createTimer({ time_in_seconds: workValue, autostart: !0 }), sound.currentTime = sound.duration - .01, sound.play() }), $("#shortBreakButton").click(function () { shortValue = 60 * shortGlobalVar, t = shortValue, currentAlertDesc = "Your short break is over.", $("#timerPosition").createTimer({ time_in_seconds: shortValue, autostart: !0 }), sound.currentTime = sound.duration - .01, sound.play() }), $("#longBreakButton").click(function () { longValue = 60 * longGlobalVar, t = longValue, currentAlertDesc = "Your long break is over.", $("#timerPosition").createTimer({ time_in_seconds: longValue, autostart: !0 }), sound.currentTime = sound.duration - .01, sound.play() }), $("#timerReset").click(function () { $("#timerPosition").resetTimer({ time_in_seconds: t }) }) }), sound.autoplay = !1, sound.loop = !1;