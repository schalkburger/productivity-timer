{"mappings":"ICOI,EADJ,MAAM,EAAe,SAAS,cAAc,CAAC,gBAE7C,IAAI,EAAmB,KASvB,MAAM,EAAa,SAAS,cAAc,CAAC,aAC3C,CAAA,EAAW,QAAQ,CAAG,CAAA,EACtB,EAAW,IAAI,CAAG,CAAA,EAOlB,MAAM,EAAe,SAAS,cAAc,CAAC,gBAU7C,SAAS,EAAoB,CAAO,CAAE,CAAO,EAC3C,GAAI,AAAY,KAAA,IAAZ,GAAyB,AAAY,KAAA,IAAZ,EAAuB,CAClD,IAAM,EAAmB,EAAQ,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAClD,EAAmB,EAAQ,QAAQ,GAAG,QAAQ,CAAC,EAAG,IACxD,CAAA,SAAS,KAAK,CAAG,CAAA,EAAG,EAAiB,CAAC,EAAE,EAAA,CAAkB,AAC5D,MACE,SAAS,KAAK,CAAG,CAErB,CAGA,SAAS,EAAW,CAAO,CAAE,CAAO,CAAE,CAAc,EAClD,cAAc,GACd,EAAmB,EACnB,IAAI,EAAe,AAAU,GAAV,EAAe,EAClC,EAAoB,EAAS,GAC7B,EAAW,YAAY,KACrB,IAAM,EAAc,KAAK,KAAK,CAAC,EAAe,IACxC,EAAc,EAAe,EAEnC,CAAA,EAAa,WAAW,CAAG,CAAA,EAAG,EAAY,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAAK,CAAC,EAAE,EAAY,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAAA,CAAM,CAClH,EAAoB,EAAa,GA1BnC,EAAa,WAAW,CAAG,EAC3B,EAAa,IAAI,GA6BX,GAAgB,IAClB,cAAc,GACd,EAAoB,GAzCxB,EAAW,WAAW,CAAG,EACzB,EAAW,IAAI,IA6Cb,GACF,EAAG,IACL,CA3CA,EAAa,QAAQ,CAAG,CAAA,EACxB,EAAa,IAAI,CAAG,CAAA,EA6CpB,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAAS,KAC/D,EAzEgB,GAyEM,EA9DA,uCA+DxB,GAEA,SAAS,cAAc,CAAC,oBAAoB,gBAAgB,CAAC,QAAS,KACpE,EA5EqB,EA4EM,EAjEF,4BAkE3B,GAEA,SAAS,cAAc,CAAC,mBAAmB,gBAAgB,CAAC,QAAS,KACnE,EA/EoB,GA+EM,EApEF,2BAqE1B,GAEA,SAAS,cAAc,CAAC,cAAc,gBAAgB,CAAC,QAAS,KAC9D,cAAc,GACd,EAAmB,qBACnB,EAAoB,sBACpB,EAAa,WAAW,CAAG,OAC7B,GAOA,MAAM,EAAa,AAAC,IAClB,IAAM,EAAS,SAAS,aAAa,CAAC,CAAC,aAAa,EAAE,EAAM,EAAE,CAAC,EAC/D,SAAS,eAAe,CAAC,YAAY,CAAC,sBAAuB,GAC7D,SAAS,aAAa,CANM,qCAMkB,YAAY,CAAC,eAAgB,SAC3E,EAAO,YAAY,CAAC,eAAgB,OACtC,EAEM,EAAuB,AAAC,IAC5B,IAAM,EAAS,EAAM,MAAM,CACrB,EAAY,EAAO,YAAY,CAAC,gBAChC,EAAQ,EAAO,YAAY,CAAC,aAEhB,CAAA,SAAd,IACF,EAAW,GACX,aAAa,OAAO,CAAC,iBAAkB,GAE3C,EAGQ,EAAa,aAAa,OAAO,CAAC,iBACpC,CAAA,GAAc,AAtBC,SAsBD,GAChB,EAAW,GASf,AAFgB,AADM,SAAS,aAAa,CAAC,mBACf,gBAAgB,CAAC,UAEvC,OAAO,CAAC,AAAC,IACf,EAAO,gBAAgB,CAAC,QAAS,EACnC","sources":["<anon>","script.js"],"sourcesContent":["var $c1ce9d969bfa6909$exports = {};\n// Values for the time\nconst $c1ce9d969bfa6909$var$focusTime = 25;\nconst $c1ce9d969bfa6909$var$shortBreakTime = 5;\nconst $c1ce9d969bfa6909$var$longBreakTime = 15;\n// Timer element\nconst $c1ce9d969bfa6909$var$timerElement = document.getElementById(\"timerDisplay\");\nlet $c1ce9d969bfa6909$var$interval;\nlet $c1ce9d969bfa6909$var$currentTimerType = null;\n// Texts for timer completion\nconst $c1ce9d969bfa6909$var$timeUpText = \"Your time is up!\";\nconst $c1ce9d969bfa6909$var$focusTimeUpText = \"Your focus time is up. Take a break.\";\nconst $c1ce9d969bfa6909$var$shortBreakOverText = \"Your short break is over.\";\nconst $c1ce9d969bfa6909$var$longBreakOverText = \"Your long break is over.\";\n// Sound functions\nconst $c1ce9d969bfa6909$var$soundTimer = document.getElementById(\"timerSound\");\n$c1ce9d969bfa6909$var$soundTimer.autoplay = false;\n$c1ce9d969bfa6909$var$soundTimer.loop = false;\nfunction $c1ce9d969bfa6909$var$playSoundTimer() {\n    $c1ce9d969bfa6909$var$soundTimer.currentTime = 0; // Reset the audio to the beginning\n    $c1ce9d969bfa6909$var$soundTimer.play();\n}\nconst $c1ce9d969bfa6909$var$soundTicking = document.getElementById(\"tickingSound\");\n$c1ce9d969bfa6909$var$soundTicking.autoplay = false;\n$c1ce9d969bfa6909$var$soundTicking.loop = false;\nfunction $c1ce9d969bfa6909$var$playSoundTicking() {\n    $c1ce9d969bfa6909$var$soundTicking.currentTime = 0; // Reset the audio to the beginning\n    $c1ce9d969bfa6909$var$soundTicking.play();\n}\n// Function to update document title\nfunction $c1ce9d969bfa6909$var$updateDocumentTitle(minutes, seconds) {\n    if (minutes !== undefined && seconds !== undefined) {\n        const formattedMinutes = minutes.toString().padStart(2, \"0\");\n        const formattedSeconds = seconds.toString().padStart(2, \"0\");\n        document.title = `${formattedMinutes}:${formattedSeconds}`;\n    } else document.title = $c1ce9d969bfa6909$var$currentTimerType;\n}\n// Function to start the timer\nfunction $c1ce9d969bfa6909$var$startTimer(minutes, seconds, completionText) {\n    clearInterval($c1ce9d969bfa6909$var$interval); // Clear any existing interval\n    $c1ce9d969bfa6909$var$currentTimerType = completionText;\n    let totalSeconds = minutes * 60 + seconds;\n    $c1ce9d969bfa6909$var$updateDocumentTitle(minutes, seconds);\n    $c1ce9d969bfa6909$var$interval = setInterval(()=>{\n        const minutesLeft = Math.floor(totalSeconds / 60);\n        const secondsLeft = totalSeconds % 60;\n        $c1ce9d969bfa6909$var$timerElement.textContent = `${minutesLeft.toString().padStart(2, \"0\")}:${secondsLeft.toString().padStart(2, \"0\")}`;\n        $c1ce9d969bfa6909$var$updateDocumentTitle(minutesLeft, secondsLeft);\n        $c1ce9d969bfa6909$var$playSoundTicking();\n        if (totalSeconds <= 0) {\n            clearInterval($c1ce9d969bfa6909$var$interval);\n            $c1ce9d969bfa6909$var$updateDocumentTitle($c1ce9d969bfa6909$var$currentTimerType); // Update document title with completion text\n            $c1ce9d969bfa6909$var$playSoundTimer(); // Play soundTimer when timer is finished\n        // Additional actions here when the timer reaches zero\n        }\n        totalSeconds--;\n    }, 1000);\n}\n// Event listeners for buttons\ndocument.getElementById(\"focusButton\").addEventListener(\"click\", ()=>{\n    $c1ce9d969bfa6909$var$startTimer($c1ce9d969bfa6909$var$focusTime, 0, $c1ce9d969bfa6909$var$focusTimeUpText);\n});\ndocument.getElementById(\"shortBreakButton\").addEventListener(\"click\", ()=>{\n    $c1ce9d969bfa6909$var$startTimer($c1ce9d969bfa6909$var$shortBreakTime, 0, $c1ce9d969bfa6909$var$shortBreakOverText);\n});\ndocument.getElementById(\"longBreakButton\").addEventListener(\"click\", ()=>{\n    $c1ce9d969bfa6909$var$startTimer($c1ce9d969bfa6909$var$longBreakTime, 0, $c1ce9d969bfa6909$var$longBreakOverText);\n});\ndocument.getElementById(\"timerReset\").addEventListener(\"click\", ()=>{\n    clearInterval($c1ce9d969bfa6909$var$interval); // Clear the interval to stop the timer\n    $c1ce9d969bfa6909$var$currentTimerType = \"Productivity Timer\";\n    $c1ce9d969bfa6909$var$updateDocumentTitle(\"Productivity Timer\"); // Set title to \"Productivity Timer\"\n    $c1ce9d969bfa6909$var$timerElement.textContent = \"25:00\";\n});\n// Theme selector\nconst $c1ce9d969bfa6909$var$pressedButtonSelector = '[data-theme][aria-pressed=\"true\"]';\nconst $c1ce9d969bfa6909$var$defaultTheme = \"blue\";\nconst $c1ce9d969bfa6909$var$applyTheme = (theme)=>{\n    const target = document.querySelector(`[data-theme=\"${theme}\"]`);\n    document.documentElement.setAttribute(\"data-selected-theme\", theme);\n    document.querySelector($c1ce9d969bfa6909$var$pressedButtonSelector).setAttribute(\"aria-pressed\", \"false\");\n    target.setAttribute(\"aria-pressed\", \"true\");\n};\nconst $c1ce9d969bfa6909$var$handleThemeSelection = (event)=>{\n    const target = event.target;\n    const isPressed = target.getAttribute(\"aria-pressed\");\n    const theme = target.getAttribute(\"data-theme\");\n    if (isPressed !== \"true\") {\n        $c1ce9d969bfa6909$var$applyTheme(theme);\n        localStorage.setItem(\"selected-theme\", theme);\n    }\n};\nconst $c1ce9d969bfa6909$var$setInitialTheme = ()=>{\n    const savedTheme = localStorage.getItem(\"selected-theme\");\n    if (savedTheme && savedTheme !== $c1ce9d969bfa6909$var$defaultTheme) $c1ce9d969bfa6909$var$applyTheme(savedTheme);\n};\n$c1ce9d969bfa6909$var$setInitialTheme();\nconst $c1ce9d969bfa6909$var$themeSwitcher = document.querySelector(\".theme-switcher\");\nconst $c1ce9d969bfa6909$var$buttons = $c1ce9d969bfa6909$var$themeSwitcher.querySelectorAll(\"button\");\n$c1ce9d969bfa6909$var$buttons.forEach((button)=>{\n    button.addEventListener(\"click\", $c1ce9d969bfa6909$var$handleThemeSelection);\n});\n\n\n//# sourceMappingURL=productivity-timer.46d46ecd.js.map\n","// Values for the time\r\nconst focusTime = 25;\r\nconst shortBreakTime = 5;\r\nconst longBreakTime = 15;\r\n\r\n// Timer element\r\nconst timerElement = document.getElementById(\"timerDisplay\");\r\nlet interval;\r\nlet currentTimerType = null;\r\n\r\n// Texts for timer completion\r\nconst timeUpText = \"Your time is up!\";\r\nconst focusTimeUpText = \"Your focus time is up. Take a break.\";\r\nconst shortBreakOverText = \"Your short break is over.\";\r\nconst longBreakOverText = \"Your long break is over.\";\r\n\r\n// Sound functions\r\nconst soundTimer = document.getElementById(\"timerSound\");\r\nsoundTimer.autoplay = false;\r\nsoundTimer.loop = false;\r\n\r\nfunction playSoundTimer() {\r\n  soundTimer.currentTime = 0; // Reset the audio to the beginning\r\n  soundTimer.play();\r\n}\r\n\r\nconst soundTicking = document.getElementById(\"tickingSound\");\r\nsoundTicking.autoplay = false;\r\nsoundTicking.loop = false;\r\n\r\nfunction playSoundTicking() {\r\n  soundTicking.currentTime = 0; // Reset the audio to the beginning\r\n  soundTicking.play();\r\n}\r\n\r\n// Function to update document title\r\nfunction updateDocumentTitle(minutes, seconds) {\r\n  if (minutes !== undefined && seconds !== undefined) {\r\n    const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n    const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n    document.title = `${formattedMinutes}:${formattedSeconds}`;\r\n  } else {\r\n    document.title = currentTimerType;\r\n  }\r\n}\r\n\r\n// Function to start the timer\r\nfunction startTimer(minutes, seconds, completionText) {\r\n  clearInterval(interval); // Clear any existing interval\r\n  currentTimerType = completionText;\r\n  let totalSeconds = minutes * 60 + seconds;\r\n  updateDocumentTitle(minutes, seconds);\r\n  interval = setInterval(() => {\r\n    const minutesLeft = Math.floor(totalSeconds / 60);\r\n    const secondsLeft = totalSeconds % 60;\r\n\r\n    timerElement.textContent = `${minutesLeft.toString().padStart(2, \"0\")}:${secondsLeft.toString().padStart(2, \"0\")}`;\r\n    updateDocumentTitle(minutesLeft, secondsLeft);\r\n\r\n    playSoundTicking();\r\n\r\n    if (totalSeconds <= 0) {\r\n      clearInterval(interval);\r\n      updateDocumentTitle(currentTimerType); // Update document title with completion text\r\n      playSoundTimer(); // Play soundTimer when timer is finished\r\n      // Additional actions here when the timer reaches zero\r\n    }\r\n\r\n    totalSeconds--;\r\n  }, 1000);\r\n}\r\n\r\n// Event listeners for buttons\r\ndocument.getElementById(\"focusButton\").addEventListener(\"click\", () => {\r\n  startTimer(focusTime, 0, focusTimeUpText);\r\n});\r\n\r\ndocument.getElementById(\"shortBreakButton\").addEventListener(\"click\", () => {\r\n  startTimer(shortBreakTime, 0, shortBreakOverText);\r\n});\r\n\r\ndocument.getElementById(\"longBreakButton\").addEventListener(\"click\", () => {\r\n  startTimer(longBreakTime, 0, longBreakOverText);\r\n});\r\n\r\ndocument.getElementById(\"timerReset\").addEventListener(\"click\", () => {\r\n  clearInterval(interval); // Clear the interval to stop the timer\r\n  currentTimerType = \"Productivity Timer\";\r\n  updateDocumentTitle(\"Productivity Timer\"); // Set title to \"Productivity Timer\"\r\n  timerElement.textContent = \"25:00\";\r\n});\r\n\r\n// Theme selector\r\n\r\nconst pressedButtonSelector = '[data-theme][aria-pressed=\"true\"]';\r\nconst defaultTheme = \"blue\";\r\n\r\nconst applyTheme = (theme) => {\r\n  const target = document.querySelector(`[data-theme=\"${theme}\"]`);\r\n  document.documentElement.setAttribute(\"data-selected-theme\", theme);\r\n  document.querySelector(pressedButtonSelector).setAttribute(\"aria-pressed\", \"false\");\r\n  target.setAttribute(\"aria-pressed\", \"true\");\r\n};\r\n\r\nconst handleThemeSelection = (event) => {\r\n  const target = event.target;\r\n  const isPressed = target.getAttribute(\"aria-pressed\");\r\n  const theme = target.getAttribute(\"data-theme\");\r\n\r\n  if (isPressed !== \"true\") {\r\n    applyTheme(theme);\r\n    localStorage.setItem(\"selected-theme\", theme);\r\n  }\r\n};\r\n\r\nconst setInitialTheme = () => {\r\n  const savedTheme = localStorage.getItem(\"selected-theme\");\r\n  if (savedTheme && savedTheme !== defaultTheme) {\r\n    applyTheme(savedTheme);\r\n  }\r\n};\r\n\r\nsetInitialTheme();\r\n\r\nconst themeSwitcher = document.querySelector(\".theme-switcher\");\r\nconst buttons = themeSwitcher.querySelectorAll(\"button\");\r\n\r\nbuttons.forEach((button) => {\r\n  button.addEventListener(\"click\", handleThemeSelection);\r\n});\r\n"],"names":["$c1ce9d969bfa6909$var$interval","$c1ce9d969bfa6909$var$timerElement","document","getElementById","$c1ce9d969bfa6909$var$currentTimerType","$c1ce9d969bfa6909$var$soundTimer","autoplay","loop","$c1ce9d969bfa6909$var$soundTicking","$c1ce9d969bfa6909$var$updateDocumentTitle","minutes","seconds","undefined","formattedMinutes","toString","padStart","formattedSeconds","title","$c1ce9d969bfa6909$var$startTimer","completionText","clearInterval","totalSeconds","setInterval","minutesLeft","Math","floor","secondsLeft","textContent","currentTime","play","addEventListener","$c1ce9d969bfa6909$var$applyTheme","theme","target","querySelector","documentElement","setAttribute","$c1ce9d969bfa6909$var$handleThemeSelection","event","isPressed","getAttribute","localStorage","setItem","savedTheme","getItem","$c1ce9d969bfa6909$var$buttons","$c1ce9d969bfa6909$var$themeSwitcher","querySelectorAll","forEach","button"],"version":3,"file":"productivity-timer.46d46ecd.js.map"}